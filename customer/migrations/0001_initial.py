# Generated by Django 3.2.5 on 2021-08-03 19:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Diners',
            fields=[
                ('mobile_number', models.IntegerField(primary_key=True, serialize=False)),
                ('customer_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'Diners',
            },
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('ingredient_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ingredient_desc', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'Ingredients',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('food_item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('food_item_desc', models.TextField(blank=True, null=True)),
                ('cuisine', models.CharField(blank=True, max_length=20, null=True)),
                ('food_type', models.CharField(blank=True, max_length=20, null=True)),
                ('image_url', models.CharField(blank=True, max_length=300, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='menu_images/')),
                ('base_price', models.FloatField(blank=True, null=True)),
                ('availability', models.IntegerField(blank=True, null=True)),
                ('prep_instructions', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Menu',
            },
        ),
        migrations.CreateModel(
            name='Paymentmethod',
            fields=[
                ('payment_method', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('payment_desc', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'PaymentMethod',
            },
        ),
        migrations.CreateModel(
            name='Promotions',
            fields=[
                ('promo_code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('promo_desc', models.TextField(blank=True, null=True)),
                ('discount_percent', models.IntegerField(blank=True, null=True)),
                ('active', models.IntegerField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Promotions',
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.IntegerField(primary_key=True, serialize=False)),
                ('order_placed_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('order_completed_at', models.DateTimeField(blank=True, null=True)),
                ('order_status', models.CharField(blank=True, default='preparing', max_length=50, null=True)),
                ('total_billed_amount', models.FloatField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=30, null=True)),
                ('net_payable', models.FloatField(blank=True, null=True)),
                ('mobile_number', models.ForeignKey(blank=True, db_column='mobile_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.diners')),
                ('payment_method', models.ForeignKey(blank=True, db_column='payment_method', null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.paymentmethod')),
                ('promo_code', models.ForeignKey(blank=True, db_column='promo_code', null=True, on_delete=django.db.models.deletion.CASCADE, to='customer.promotions')),
            ],
            options={
                'db_table': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.IntegerField(primary_key=True, serialize=False)),
                ('last_update_timestamp', models.DateTimeField(blank=True, null=True)),
                ('qty_available', models.FloatField(blank=True, null=True)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.ingredients')),
            ],
            options={
                'db_table': 'Inventory',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient_quantity', models.FloatField(blank=True, null=True)),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.menu')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.ingredients')),
            ],
            options={
                'db_table': 'Recipe',
                'unique_together': {('food_item', 'ingredient')},
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.IntegerField(blank=True, null=True)),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.menu')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.orders')),
            ],
            options={
                'db_table': 'Cart',
                'unique_together': {('food_item', 'order')},
            },
        ),
    ]
